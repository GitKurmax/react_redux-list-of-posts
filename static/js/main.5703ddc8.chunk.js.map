{"version":3,"sources":["redux/actions.js","redux/reducers.js","components/User.js","components/Comment.js","components/CommentHandler.js","components/CommentList.js","components/Post.js","components/PostHandler.js","components/PostList.js","components/PostListHandler.js","App.js","serviceWorker.js","index.js"],"names":["DELETE_POST","DELETE_COMMENT","LOAD_DATA","DISPLAY","UPDATE_INPUT","loadData","dispatch","type","Promise","all","fetch","then","response","json","_ref","_ref2","Object","slicedToArray","posts","users","comments","map","post","user","find","id","userId","filter","comment","postId","data","initialState","items","requested","inputValue","User","props","react_default","a","createElement","name","href","email","address","street","suite","city","zipcode","Comment","text","author","className","onClick","deleteComment","CommentHandler","connect","state","ownProps","body","CommentList","Fragment","components_CommentHandler","key","Post","title","deletePost","components_User","components_CommentList","PostHandler","element","PostList","list","item","includes","forEach","push","components_PostHandler","placeholder","value","onChange","event","updateInput","target","getData","PostListHandler","store","createStore","arguments","length","undefined","action","objectSpread","applyMiddleware","thunk","App","es","components_PostListHandler","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+PAAaA,EAAc,cACdC,EAAiB,iBACjBC,EAAY,YACZC,EAAU,UACVC,EAAe,eAiBrB,SAASC,IACd,OAAO,SAACC,GACNA,EAAS,CACPC,KAAML,IAGRM,QAAQC,IAAI,CACVC,MAAM,8CACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC7BH,MAAM,8CACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC7BH,MAAM,iDACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,WAC5BF,KAAK,SAAAG,GAA8B,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAF,EAAA,GAA5BI,EAA4BH,EAAA,GAArBI,EAAqBJ,EAAA,GAAdK,EAAcL,EAAA,GACpCG,EAAMG,IAAI,SAACC,GACTA,EAAKC,KAAOJ,EAAMK,KAAK,SAAAD,GAAI,OAAIA,EAAKE,KAAOH,EAAKI,SAChDJ,EAAKF,SAAWA,EAASO,OAAO,SAAAC,GAAO,OAAIA,EAAQC,SAAWP,EAAKG,OAErEnB,EAMG,CACLC,KAAMJ,EACN2B,KARmBZ,OClCvB,IAAMa,EAAe,CACnBC,MAAO,KACPC,WAAW,EACXC,WAAY,ICQCC,MAdf,SAAcC,GACZ,OACEC,EAAAC,EAAAC,cAAA,eACEF,EAAAC,EAAAC,cAAA,YAAOH,EAAMb,KAAKiB,KAAlB,MACAH,EAAAC,EAAAC,cAAA,YAAMF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,KAAKL,EAAMb,KAAKmB,OAA9B,MACAL,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,YAAOH,EAAMb,KAAKoB,QAAQC,OAA1B,MACAP,EAAAC,EAAAC,cAAA,YAAOH,EAAMb,KAAKoB,QAAQE,MAA1B,MACAR,EAAAC,EAAAC,cAAA,YAAOH,EAAMb,KAAKoB,QAAQG,KAA1B,MACAT,EAAAC,EAAAC,cAAA,YAAOH,EAAMb,KAAKoB,QAAQI,WCQjBC,MAjBf,SAAiBZ,GACf,OACEC,EAAAC,EAAAC,cAAA,eACEF,EAAAC,EAAAC,cAAA,SAAIH,EAAMa,MACVZ,EAAAC,EAAAC,cAAA,SAAIH,EAAMc,QACVb,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,KAAKL,EAAMM,OACnBL,EAAAC,EAAAC,cAAA,QAAMY,UAAU,MACdC,QAAS,kBACPhB,EAAMiB,cAAcjB,EAAMR,QAAQH,GAAIW,EAAMR,QAAQC,UAFxD,WCUR,IAKeyB,EALQC,YAfvB,SAAyBC,EAAOC,GAC9B,MAAO,CACL7B,QAAS6B,EAAS7B,QAClBqB,KAAMQ,EAAS7B,QAAQ8B,KACvBR,OAAQO,EAAS7B,QAAQY,KACzBE,MAAOe,EAAS7B,QAAQc,QAI5B,SAA4BpC,GAC1B,MAAO,CACL+C,cAAe,SAAC5B,EAAII,GAAL,OAAgBvB,EJF5B,SAAuBmB,EAAII,GAChC,MAAO,CACLtB,KAAMN,EACN4B,SACAJ,MIFwC4B,CAAc5B,EAAII,OAIvC0B,CAGrBP,GCLaW,MAdf,SAAqBvB,GACnB,OACEC,EAAAC,EAAAC,cAACF,EAAAC,EAAMsB,SAAP,KACEvB,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,WAASY,UAAU,YAChBf,EAAMhB,SAASC,IAAI,SAAAO,GAAO,OAAIS,EAAAC,EAAAC,cAACsB,EAAD,CAC7BC,IAAOlC,EAAQ8B,KACf9B,QAASA,eCYJmC,MAjBf,SAAc3B,GACZ,OACEC,EAAAC,EAAAC,cAAA,OAAKY,UAAU,QACbd,EAAAC,EAAAC,cAAA,UAAKH,EAAMd,KAAK0C,MACd3B,EAAAC,EAAAC,cAAA,QAAMY,UAAU,MAAMC,QAAS,kBAAMhB,EAAM6B,WAAW7B,EAAMd,KAAKG,MAAjE,SAEFY,EAAAC,EAAAC,cAAA,SAAIH,EAAMd,KAAKoC,MACfrB,EAAAC,EAAAC,cAAA,eACEF,EAAAC,EAAAC,cAAC2B,EAAD,CAAM3C,KAAQa,EAAMd,KAAKC,QAE3Bc,EAAAC,EAAAC,cAAA,WAASY,UAAU,kBACjBd,EAAAC,EAAAC,cAAC4B,EAAD,CAAa/C,SAAUgB,EAAMd,KAAKF,cCA1C,IAKegD,EALKb,YAZpB,SAAyBC,EAAOC,GAC9B,MAAO,CACLnC,KAAMmC,EAASY,UAInB,SAA4B/D,GAC1B,MAAO,CACL2D,WAAY,SAACxC,GAAD,OAAQnB,EPNjB,SAAoBmB,GACzB,MAAO,CACLlB,KAAMP,EACNyB,MOG6BwC,CAAWxC,OAIxB8B,CAGlBQ,GCUaO,MA1Bf,SAAkBlC,GAChB,IAAMmC,EAAO,GACb,OAAInC,EAAMH,UACJG,EAAMJ,OACSI,EAAMJ,MAAML,OAAO,SAAA6C,GAAI,OAAIA,EAAKR,MAAMS,SAASrC,EAAMF,aAAesC,EAAKd,KAAKe,SAASrC,EAAMF,cACrGwC,QAAQ,SAACL,GAChBE,EAAKI,KAAKtC,EAAAC,EAAAC,cAACqC,EAAD,CAAad,IAAKO,EAAQ5C,GAAI4C,QAASA,OAIjDhC,EAAAC,EAAAC,cAAA,eACEF,EAAAC,EAAAC,cAAA,SACEhC,KAAK,OACLsE,YAAY,YACZC,MAAO1C,EAAMF,WACb6C,SAAU,SAAAC,GAAK,OAAI5C,EAAM6C,YAAYD,EAAME,OAAOJ,UAEnDP,IAIAlC,EAAAC,EAAAC,cAAA,uBAEFF,EAAAC,EAAAC,cAAA,UAAQhC,KAAK,SAAS6C,QAAShB,EAAM+C,SAArC,SCPT,IAKeC,EALS7B,YAfxB,SAAyBC,GACvB,MAAO,CACLxB,MAAOwB,EAAMxB,MACbC,UAAWuB,EAAMvB,UACjBC,WAAYsB,EAAMtB,aAItB,SAA4B5B,GAC1B,MAAO,CACL6E,QAAS,kBAAM7E,EAASD,MACxB4E,YAAa,SAAAH,GAAK,OAAIxE,EToCnB,SAAqBwE,GAC1B,MAAO,CACLvE,KAAMH,EACN0E,SSvC+BG,CAAYH,OAIvBvB,CAGtBe,GCfIe,EAAQC,YTIP,WAA+C,IAA9B9B,EAA8B+B,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAtBxD,EAAc2D,EAAQH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACpD,OAAQC,EAAOnF,MACb,KAAKP,EACH,OAAOgB,OAAA2E,EAAA,EAAA3E,CAAA,GACFwC,EADL,CAEExB,MAAOwB,EAAMxB,MAAML,OAAO,SAAA6C,GAAI,OAAIkB,EAAOjE,KAAO+C,EAAK/C,OAEzD,KAAKxB,EACH,OAAOe,OAAA2E,EAAA,EAAA3E,CAAA,GACFwC,EADL,CAEExB,MAAOwB,EAAMxB,MAAMX,IAAI,SAACmD,GACtB,OAAIA,EAAK/C,KAAOiE,EAAO7D,OACdb,OAAA2E,EAAA,EAAA3E,CAAA,GACFwD,EADL,CAEEpD,SAAUoD,EAAKpD,SAASO,OAAO,SAAA6C,GAAI,OAAIA,EAAK/C,KAAOiE,EAAOjE,OAGvD+C,MAGb,KAAKtE,EACH,OAAOc,OAAA2E,EAAA,EAAA3E,CAAA,GACFwC,EADL,CAEEvB,WAAW,IAEf,KAAK9B,EACH,OAAOa,OAAA2E,EAAA,EAAA3E,CAAA,GACFwC,EADL,CAEExB,MAAO0D,EAAO5D,OAElB,KAAK1B,EACH,OAAOY,OAAA2E,EAAA,EAAA3E,CAAA,GACFwC,EADL,CAEEtB,WAAYwD,EAAOZ,QAEvB,QACE,OAAOtB,ISxCsBoC,YAAgBC,MAUpCC,MARf,WACE,OACEzD,EAAAC,EAAAC,cAACwD,EAAA,EAAD,CAAUV,MAAOA,GACfhD,EAAAC,EAAAC,cAACyD,EAAD,QCAcC,QACW,cAA7BC,OAAOC,SAASC,UAEkB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAC1B,2DCZNC,IAASC,OAAOlE,EAAAC,EAAAC,cAACiE,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlG,KAAK,SAACmG,GAClCA,EAAaC","file":"static/js/main.5703ddc8.chunk.js","sourcesContent":["export const DELETE_POST = 'delete_post';\nexport const DELETE_COMMENT = 'delete_comment';\nexport const LOAD_DATA = 'load_data';\nexport const DISPLAY = 'display';\nexport const UPDATE_INPUT = 'update_input';\n\nexport function deletePost(id) {\n  return {\n    type: DELETE_POST,\n    id,\n  };\n}\n\nexport function deleteComment(id, postId) {\n  return {\n    type: DELETE_COMMENT,\n    postId,\n    id,\n  };\n}\n\nexport function loadData() {\n  return (dispatch) => {\n    dispatch({\n      type: LOAD_DATA,\n    });\n\n    Promise.all([\n      fetch('https://jsonplaceholder.typicode.com/posts')\n        .then(response => response.json()),\n      fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json()),\n      fetch('https://jsonplaceholder.typicode.com/comments')\n        .then(response => response.json())\n    ]).then(([posts, users, comments]) => {\n      posts.map((post) => {\n        post.user = users.find(user => user.id === post.userId);\n        post.comments = comments.filter(comment => comment.postId === post.id);\n      });\n      dispatch(display(posts));\n    });\n  };\n}\n\nexport function display(data) {\n  return {\n    type: DISPLAY,\n    data,\n  };\n}\n\nexport function updateInput(value) {\n  return {\n    type: UPDATE_INPUT,\n    value,\n  };\n}\n","import {\n  DELETE_COMMENT, LOAD_DATA, DISPLAY, DELETE_POST, UPDATE_INPUT,\n}\n  from './actions';\n\nconst initialState = {\n  items: null,\n  requested: false,\n  inputValue: '',\n};\n\nexport function reducer(state = initialState, action) {\n  switch (action.type) {\n    case DELETE_POST:\n      return {\n        ...state,\n        items: state.items.filter(item => action.id !== item.id)\n      };\n    case DELETE_COMMENT:\n      return {\n        ...state,\n        items: state.items.map((item) => {\n          if (item.id === action.postId) {\n            return {\n              ...item,\n              comments: item.comments.filter(item => item.id !== action.id)\n            };\n          }\n          return item;\n        }),\n      };\n    case LOAD_DATA:\n      return {\n        ...state,\n        requested: true,\n      };\n    case DISPLAY:\n      return {\n        ...state,\n        items: action.data,\n      };\n    case UPDATE_INPUT:\n      return {\n        ...state,\n        inputValue: action.value,\n      };\n    default:\n      return state;\n  }\n}\n","import React from 'react';\n\nfunction User(props) {\n  return (\n    <section>\n      <span>{props.user.name}, </span>\n      <span><a href=\"#\">{props.user.email}</a>, </span>\n      <span>adress: </span>\n      <span>{props.user.address.street}, </span>\n      <span>{props.user.address.suite}, </span>\n      <span>{props.user.address.city}, </span>\n      <span>{props.user.address.zipcode}</span>\n    </section>\n  );\n}\n\nexport default User;\n","import React from 'react';\n\nfunction Comment(props) {\n  return (\n    <section>\n      <p>{props.text}</p>\n      <p>{props.author}</p>\n      <p>\n        <a href=\"#\">{props.email}</a>\n        <span className='del' \n          onClick={() => \n            props.deleteComment(props.comment.id, props.comment.postId )}>\n            &times;\n        </span>\n      </p>\n    </section>\n  );\n}\n\nexport default Comment;\n","import { connect } from 'react-redux';\nimport { deleteComment } from '../redux/actions';\nimport Comment from './Comment';\n\nfunction mapStateToProps(state, ownProps) {\n  return {\n    comment: ownProps.comment,\n    text: ownProps.comment.body,\n    author: ownProps.comment.name,\n    email: ownProps.comment.email,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    deleteComment: (id, postId) => dispatch(deleteComment(id, postId)),\n  };\n}\n\nconst CommentHandler = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Comment);\n\nexport default CommentHandler;\n","import React from 'react';\nimport CommentHandler from './CommentHandler';\n\nfunction CommentList(props) {\n  return (\n    <React.Fragment>\n      <h3>Comments</h3>\n      <section className=\"comments\">\n        {props.comments.map(comment => <CommentHandler\n          key = {comment.body} \n          comment={comment}\n        />)}\n      </section>\n    </React.Fragment>\n  );\n}\n\nexport default CommentList;\n","import React from 'react';\nimport User from './User';\nimport CommentList from './CommentList';\nimport '../css/Post.css';\n\nfunction Post(props) {\n  return (\n    <div className=\"post\">\n      <h2>{props.post.title}\n        <span className='del' onClick={() => props.deletePost(props.post.id)}>&times;</span>\n      </h2>\n      <p>{props.post.body}</p>\n      <section>\n        <User user = {props.post.user}/>\n      </section>\n      <section className=\"comments_block\">\n        <CommentList comments={props.post.comments}/>\n      </section>\n    </div>\n  );\n}\n\nexport default Post;\n","import {connect} from 'react-redux';\r\nimport {deletePost} from '../redux/actions';\r\nimport Post from './Post';\r\n\r\nfunction mapStateToProps(state, ownProps) {\r\n  return {\r\n    post: ownProps.element\r\n  }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    deletePost: (id) => dispatch(deletePost(id))\r\n  }\r\n}\r\n\r\nconst PostHandler = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Post);\r\n\r\nexport default PostHandler;\r\n","import React from 'react';\nimport PostHandler from './PostHandler';\n\nfunction PostList(props) {\n  const list = [];\n  if (props.requested) {\n    if (props.items) {\n      const filtered = props.items.filter(item => item.title.includes(props.inputValue) || item.body.includes(props.inputValue));\n      filtered.forEach((element) => {\n        list.push(<PostHandler key={element.id} element={element} />);\n      });\n\n      return (\n        <section>\n          <input\n            type=\"text\"\n            placeholder=\"search...\"\n            value={props.inputValue}\n            onChange={event => props.updateInput(event.target.value)}\n          />\n          {list}\n        </section>\n      );\n    }\n    return <p>Loading...</p>;\n  }\n  return <button type=\"button\" onClick={props.getData}>Load</button>;\n}\n\nexport default PostList;\n","import { connect } from 'react-redux';\nimport { loadData, updateInput } from '../redux/actions';\nimport PostList from './PostList';\n\nfunction mapStateToProps(state) {\n  return {\n    items: state.items,\n    requested: state.requested,\n    inputValue: state.inputValue,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    getData: () => dispatch(loadData()),\n    updateInput: value => dispatch(updateInput(value)),\n  };\n}\n\nconst PostListHandler = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(PostList);\n\nexport default PostListHandler;\n","import React from 'react';\nimport { applyMiddleware, createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport { reducer } from './redux/reducers';\nimport PostListHandler from './components/PostListHandler';\n\nconst store = createStore(reducer, applyMiddleware(thunk));\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <PostListHandler />\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost'\r\n    // [::1] is the IPv6 localhost address.\r\n    || window.location.hostname === '[::1]'\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    || window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets;\r\n      // see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost.\r\n        // Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service '\r\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all '\r\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404\r\n        || (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}